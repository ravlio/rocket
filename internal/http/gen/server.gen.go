// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for MessageMetadataMessageType.
const (
	RocketExploded       MessageMetadataMessageType = "RocketExploded"
	RocketLaunched       MessageMetadataMessageType = "RocketLaunched"
	RocketMissionChanged MessageMetadataMessageType = "RocketMissionChanged"
	RocketSpeedDecreased MessageMetadataMessageType = "RocketSpeedDecreased"
	RocketSpeedIncreased MessageMetadataMessageType = "RocketSpeedIncreased"
)

// Defines values for RocketStateStatus.
const (
	EXPLODED RocketStateStatus = "EXPLODED"
	LAUNCHED RocketStateStatus = "LAUNCHED"
)

// Defines values for ListRocketsParamsSortBy.
const (
	Id             ListRocketsParamsSortBy = "id"
	LastUpdateTime ListRocketsParamsSortBy = "lastUpdateTime"
	Mission        ListRocketsParamsSortBy = "mission"
	Speed          ListRocketsParamsSortBy = "speed"
	Type           ListRocketsParamsSortBy = "type"
)

// Defines values for ListRocketsParamsSortOrder.
const (
	Asc  ListRocketsParamsSortOrder = "asc"
	Desc ListRocketsParamsSortOrder = "desc"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code A unique error code.
	Code string `json:"code"`

	// Message A human-readable error message.
	Message string `json:"message"`
}

// Message The specific message payload, determined by `metadata.messageType`.
type Message struct {
	// By Amount for speed change (for RocketSpeedIncreased/Decreased)
	By *int64 `json:"by,omitempty"`

	// LaunchSpeed Launch speed (for RocketLaunched)
	LaunchSpeed *int64 `json:"launchSpeed,omitempty"`

	// Mission Mission name (for RocketLaunched)
	Mission *string `json:"mission,omitempty"`

	// NewMission New mission name (for RocketMissionChanged)
	NewMission *string `json:"newMission,omitempty"`

	// Reason Reason for explosion (for RocketExploded)
	Reason *string `json:"reason,omitempty"`

	// Type Rocket type (for RocketLaunched)
	Type *string `json:"type,omitempty"`
}

// MessageMetadata defines model for MessageMetadata.
type MessageMetadata struct {
	// Channel Unique identifier for the rocket (also its ID).
	Channel openapi_types.UUID `json:"channel"`

	// MessageNumber Order of the message within its channel. Higher is newer.
	MessageNumber int64 `json:"messageNumber"`

	// MessageTime Timestamp when the message was sent (ISO 8601 format).
	MessageTime time.Time `json:"messageTime"`

	// MessageType Type of event described by the message.
	MessageType MessageMetadataMessageType `json:"messageType"`
}

// MessageMetadataMessageType Type of event described by the message.
type MessageMetadataMessageType string

// RocketState The current aggregated state of a rocket.
type RocketState struct {
	// CurrentSpeed Current speed of the rocket in meters per second (m/s).
	CurrentSpeed int64 `json:"currentSpeed"`

	// Id Unique identifier (channel) of the rocket.
	Id openapi_types.UUID `json:"id"`

	// LastProcessedMessageNumber The highest message number processed for this rocket.
	LastProcessedMessageNumber int64 `json:"lastProcessedMessageNumber"`

	// LastUpdateTime Timestamp of the last processed message that updated this state.
	LastUpdateTime time.Time `json:"lastUpdateTime"`

	// Mission The current mission assigned to the rocket.
	Mission string `json:"mission"`

	// Reason If exploded, the reason for the explosion.
	Reason *string `json:"reason"`

	// Status The operational status of the rocket.
	Status RocketStateStatus `json:"status"`

	// Type The type of the rocket (e.g., Falcon-9, Soyuz).
	Type string `json:"type"`
}

// RocketStateStatus The operational status of the rocket.
type RocketStateStatus string

// TelemetryMessage Base schema for any telemetry message received from a rocket.
type TelemetryMessage struct {
	// Message The specific message payload, determined by `metadata.messageType`.
	Message  Message         `json:"message"`
	Metadata MessageMetadata `json:"metadata"`
}

// ListRocketsParams defines parameters for ListRockets.
type ListRocketsParams struct {
	// SortBy Field to sort by (e.g., id, type, speed, mission, lastUpdateTime)
	SortBy *ListRocketsParamsSortBy `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// SortOrder Sort order (asc or desc)
	SortOrder *ListRocketsParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// ListRocketsParamsSortBy defines parameters for ListRockets.
type ListRocketsParamsSortBy string

// ListRocketsParamsSortOrder defines parameters for ListRockets.
type ListRocketsParamsSortOrder string

// IngestMessageJSONRequestBody defines body for IngestMessage for application/json ContentType.
type IngestMessageJSONRequestBody = TelemetryMessage

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Ingest a new rocket telemetry message
	// (POST /messages)
	IngestMessage(ctx echo.Context) error
	// Get a list of all rockets and their current states
	// (GET /v1/rockets)
	ListRockets(ctx echo.Context, params ListRocketsParams) error
	// Get the current state of a specific rocket
	// (GET /v1/rockets/{id})
	GetRocketState(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// IngestMessage converts echo context to params.
func (w *ServerInterfaceWrapper) IngestMessage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IngestMessage(ctx)
	return err
}

// ListRockets converts echo context to params.
func (w *ServerInterfaceWrapper) ListRockets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRocketsParams
	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortBy: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListRockets(ctx, params)
	return err
}

// GetRocketState converts echo context to params.
func (w *ServerInterfaceWrapper) GetRocketState(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRocketState(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/messages", wrapper.IngestMessage)
	router.GET(baseURL+"/v1/rockets", wrapper.ListRockets)
	router.GET(baseURL+"/v1/rockets/:id", wrapper.GetRocketState)

}

type IngestMessageRequestObject struct {
	Body *IngestMessageJSONRequestBody
}

type IngestMessageResponseObject interface {
	VisitIngestMessageResponse(w http.ResponseWriter) error
}

type IngestMessage202JSONResponse struct {
	Status *string `json:"status,omitempty"`
}

func (response IngestMessage202JSONResponse) VisitIngestMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type IngestMessage400JSONResponse ErrorResponse

func (response IngestMessage400JSONResponse) VisitIngestMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type IngestMessage500JSONResponse ErrorResponse

func (response IngestMessage500JSONResponse) VisitIngestMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRocketsRequestObject struct {
	Params ListRocketsParams
}

type ListRocketsResponseObject interface {
	VisitListRocketsResponse(w http.ResponseWriter) error
}

type ListRockets200JSONResponse []RocketState

func (response ListRockets200JSONResponse) VisitListRocketsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRockets400JSONResponse ErrorResponse

func (response ListRockets400JSONResponse) VisitListRocketsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListRockets500JSONResponse ErrorResponse

func (response ListRockets500JSONResponse) VisitListRocketsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRocketStateRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetRocketStateResponseObject interface {
	VisitGetRocketStateResponse(w http.ResponseWriter) error
}

type GetRocketState200JSONResponse RocketState

func (response GetRocketState200JSONResponse) VisitGetRocketStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRocketState404JSONResponse ErrorResponse

func (response GetRocketState404JSONResponse) VisitGetRocketStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRocketState500JSONResponse ErrorResponse

func (response GetRocketState500JSONResponse) VisitGetRocketStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Ingest a new rocket telemetry message
	// (POST /messages)
	IngestMessage(ctx context.Context, request IngestMessageRequestObject) (IngestMessageResponseObject, error)
	// Get a list of all rockets and their current states
	// (GET /v1/rockets)
	ListRockets(ctx context.Context, request ListRocketsRequestObject) (ListRocketsResponseObject, error)
	// Get the current state of a specific rocket
	// (GET /v1/rockets/{id})
	GetRocketState(ctx context.Context, request GetRocketStateRequestObject) (GetRocketStateResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// IngestMessage operation middleware
func (sh *strictHandler) IngestMessage(ctx echo.Context) error {
	var request IngestMessageRequestObject

	var body IngestMessageJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.IngestMessage(ctx.Request().Context(), request.(IngestMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IngestMessage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(IngestMessageResponseObject); ok {
		return validResponse.VisitIngestMessageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListRockets operation middleware
func (sh *strictHandler) ListRockets(ctx echo.Context, params ListRocketsParams) error {
	var request ListRocketsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListRockets(ctx.Request().Context(), request.(ListRocketsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRockets")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListRocketsResponseObject); ok {
		return validResponse.VisitListRocketsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRocketState operation middleware
func (sh *strictHandler) GetRocketState(ctx echo.Context, id openapi_types.UUID) error {
	var request GetRocketStateRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRocketState(ctx.Request().Context(), request.(GetRocketStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRocketState")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRocketStateResponseObject); ok {
		return validResponse.VisitGetRocketStateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
